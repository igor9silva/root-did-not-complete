---
description: 
globs: convex/**/*.ts,convex/**/*.tsx
alwaysApply: false
---
# Convex Backend Patterns

## IMPORTANT
- DO NOT ever use `bunx convex deploy` as this deploy direct to PRODUCTION

## File Organization Pattern
- **public.ts**: Client-callable functions (queries, mutations, actions)
- **private.ts**: Internal functions with underscore prefix (`_functionName`)
	- NOTE: EVERYTHING ON PRIVATE FILES (and there for prefixed with _) IS NOT AUTHORIZED. i.e. we don't check for any kind of authentication or authorization.
- **schemas/**: Zod schemas for validation and type generation
- **lib/**: Shared utilities and helpers

## Types
- we use Zod schemas to define ALL custom types
- avoid as much as possible to re-write any schemas or types or interfaces
- instead, import the schema from zod and z.infer() from it

## API Design Patterns

### Function Imports
- **CRITICAL**: Import `query`, `mutation`, `action` from `../lib` - NEVER from `_generated/server`
- **CRITICAL**: Import `internalQuery`, `internalMutation`, `internalAction` from `../lib` - NEVER from `_generated/server`
- The lib.ts file provides Zod-enhanced versions with proper validation

```ts
// CORRECT
import { action, query, mutation } from '../lib';
import { internalAction, internalQuery, internalMutation } from '../lib';

// WRONG - NEVER DO THIS
import { action, query, mutation } from '../_generated/server';
```

### Public Functions
- Use descriptive names without underscores
- Always validate args with Zod schemas
- *****MUST INCLUDE authentication/authorization checks*****
- Export for client consumption

```ts
export const findAll = query({
	args: {
		parentId: zid('tasks').optional(), //
	},
	handler: async (ctx, { parentId }) => {
		//
		const { currentUser } = await getCurrentUser(ctx, {});
		// implementation
	},
});
```

### Private Functions  
- **ALWAYS** prefix with underscore: `_functionName`
- Use `internalQuery`, `internalMutation`, `internalAction` from lib.ts
- No direct client access - internal use only

```ts
export const _findByStatus = internalQuery({
	args: {
		taskId: zid('tasks'), status: z.string(), //
	},
	handler: async (ctx, { taskId, status }) => {
		// implementation
	},
});
```

## Authorization Patterns

### Standard Authorization Check
```ts
export const ensureTaskOwner = async (
  ctx: QueryCtx | MutationCtx,
  args: { taskId: Id<'tasks'> }
) => {
  const currentUser = await getCurrentUser(ctx, {});
  const task = await ctx.db.get(args.taskId);
  
  if (!task) throw new Error('Task not found');
  if (task.owner !== currentUser._id) throw new Error('Task not found'); // Don't mention authorization
  
  return { currentUser, task };
};
```

### Authorization Rules
- **NEVER** mention "authorization" in error messages for security
- Use generic "not found" errors instead
- Check ownership before any public-facing operations and whenever it makes sense
- Return both user and resource for convenience

## Database Patterns

### Query Patterns
```ts
// ALWAYS (and I mean ALWAYS) use indexes for performance
// NEVER, ABSOLUTETLY NEVER do filter() without an explicit user consent
.withIndex('by_owner_parentId_isActive', (q) =>
  q.eq('owner', currentUser._id)
   .eq('parentId', undefined)
   .eq('isActive', true)
)
```

### ID Types
- Use `zid('tableName')` for typed IDs
- Import from `convex-helpers/server/zod`
- Validates ID format and table reference

## Function Composition
- Public functions call private functions for logic (make sure business logic are ALWAYS centralized on a single place)
- Private functions handle actual database operations and business logic
- Reuse private functions across modules (to keep business logic centralized)

## Type Safety
- Use generated types: `Doc<'tableName'>`, `Id<'tableName'>`
- Validate all inputs with Zod
- Return typed results
- No `any` types allowed (NOR IMPLICIT NOR EXPLICIT)
- DO NOT EVER do any "type hacks"
- If you are unable to implement a trully type-safe solution, its preferable to STOP AND ASK FOR HELP then to write a not-actually-type-safe solution.

## Environment Varibles
- All server side EnvVars are set directly into Convex via CLI
- to use an EnvVar, *ALWAYS* `import { env } from './schemas/envSchema'`
- NEVER use process.env directly